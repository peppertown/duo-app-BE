// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  sub          String?   @unique
  email        String?   @unique
  password     String?
  nickname     String?
  profileUrl   String?
  authProvider String?
  code         String    @unique
  birthday     DateTime? @default(now())
  themeId      Int       @default(1)
  pushToken    String?

  couplesAsA Couple[] @relation("CoupleA")
  couplesAsB Couple[] @relation("CoupleB")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Todo         Todo[]
  Schedule     Schedule[]
  ListContent  ListContent[]
  Memo         Memo[]
  Notification Notification[]
}

model Theme {
  id    Int    @id @default(autoincrement())
  color String
}

model Couple {
  id           Int       @id @default(autoincrement())
  aId          Int
  bId          Int
  a            User      @relation("CoupleA", fields: [aId], references: [id], onDelete: Cascade)
  b            User      @relation("CoupleB", fields: [bId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  anniversary  DateTime?
  widgetMemoId Int?

  Todo              Todo[]
  Schedule          Schedule[]
  Memo              Memo[]
  List              List[]
  Widget            Widget[]
  CoupleAnniversary CoupleAnniversary[]
}

model CoupleAnniversary {
  id       Int      @id @default(autoincrement())
  title    String
  coupleId Int
  date     DateTime

  couple Couple @relation(fields: [coupleId], references: [id])
}

model Todo {
  id        Int      @id @default(autoincrement())
  coupleId  Int?
  writerId  Int
  content   String
  isDone    Boolean  @default(false)
  createdAt DateTime @default(now())

  couple Couple? @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  writer User    @relation(fields: [writerId], references: [id])
}

model Memo {
  id        Int      @id @default(autoincrement())
  coupleId  Int?
  createdAt DateTime @default(now())
  content   String?  @db.Text
  writerId  Int

  couple Couple? @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  writer User    @relation(fields: [writerId], references: [id])
}

model List {
  id        Int      @id @default(autoincrement())
  coupleId  Int?     @unique
  createdAt DateTime @default(now())

  couple      Couple?       @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  ListContent ListContent[]
}

model ListContent {
  id         Int      @id @default(autoincrement())
  listId     Int
  writerId   Int
  categoryId Int
  content    String
  isDone     Boolean  @default(false)
  createdAt  DateTime @default(now())

  list     List         @relation(fields: [listId], references: [id], onDelete: Cascade)
  writer   User         @relation(fields: [writerId], references: [id])
  category ListCategory @relation(fields: [categoryId], references: [id])
}

model ListCategory {
  id          Int           @id @default(autoincrement())
  name        String
  ListContent ListContent[]
}

model Schedule {
  id        Int      @id @default(autoincrement())
  userId    Int
  coupleId  Int?
  title     String
  start     DateTime
  end       DateTime
  createdAt DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id])
  couple Couple? @relation(fields: [coupleId], references: [id], onDelete: Cascade)
}

model Widget {
  id       Int     @id @default(autoincrement())
  coupleId Int?    @unique
  photoUrl String?

  couple Couple? @relation(fields: [coupleId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  type      NotificationType
  payload   Json
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  MEMO_CREATED
  LIST_TOGGLED
  CONNECTION_REQUEST
  CONNECTION_ACCEPTED
  CONNECTION_BROKEN
}
