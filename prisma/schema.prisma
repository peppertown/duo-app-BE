// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  sub          String?   @unique
  email        String?   @unique
  password     String?
  nickname     String?
  profileUrl   String?
  authProvider String?
  code         String    @unique
  birthday     DateTime?

  couplesAsA Couple[] @relation("CoupleA")
  couplesAsB Couple[] @relation("CoupleB")

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Todo        Todo[]
  Schedule    Schedule[]
  ListContent ListContent[]
  Memo        Memo[]
}

model Couple {
  id           Int       @id @default(autoincrement())
  name         String?
  aId          Int
  bId          Int
  a            User      @relation("CoupleA", fields: [aId], references: [id])
  b            User      @relation("CoupleB", fields: [bId], references: [id])
  createdAt    DateTime  @default(now())
  anniversary  DateTime?
  widgetMemoId Int?

  Todo     Todo[]
  Schedule Schedule[]
  Memo     Memo[]
  List     List[]
  Widget   Widget[]
}

model Todo {
  id        Int      @id @default(autoincrement())
  coupleId  Int?
  writerId  Int
  content   String
  isDone    Boolean  @default(false)
  createdAt DateTime @default(now())

  couple Couple? @relation(fields: [coupleId], references: [id])
  writer User    @relation(fields: [writerId], references: [id])
}

model Memo {
  id        Int      @id @default(autoincrement())
  coupleId  Int?
  createdAt DateTime @default(now())
  content   String?
  writerId  Int

  couple Couple? @relation(fields: [coupleId], references: [id])
  writer User    @relation(fields: [writerId], references: [id])
}

model List {
  id        Int      @id @default(autoincrement())
  coupleId  Int?     @unique
  createdAt DateTime @default(now())

  couple      Couple?       @relation(fields: [coupleId], references: [id])
  ListContent ListContent[]
}

model ListContent {
  id        Int      @id @default(autoincrement())
  listId    Int
  writerId  Int
  content   String
  isDone    Boolean  @default(false)
  createdAt DateTime @default(now())

  list   List @relation(fields: [listId], references: [id])
  writer User @relation(fields: [writerId], references: [id])
}

model Schedule {
  id        Int      @id @default(autoincrement())
  userId    Int
  coupleId  Int?
  title     String
  start     DateTime
  end       DateTime
  createdAt DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id])
  couple Couple? @relation(fields: [coupleId], references: [id])
}

model Widget {
  id       Int     @id @default(autoincrement())
  coupleId Int?    @unique
  photoUrl String?

  couple Couple? @relation(fields: [coupleId], references: [id])
}
